object Form1: TForm1
  Left = 523
  Height = 1065
  Top = 163
  Width = 1065
  Caption = 'PIGS on openCL'
  ClientHeight = 1065
  ClientWidth = 1065
  DesignTimePPI = 144
  OnCreate = FormCreate
  OnDestroy = FormDestroy
  LCLVersion = '3.0.0.3'
  object Image1: TImage
    Left = 0
    Height = 983
    Top = 40
    Width = 1065
    Align = alClient
    OnResize = Image1Resize
  end
  object sb: TStatusBar
    Left = 0
    Height = 42
    Top = 1023
    Width = 1065
    Panels = <>
  end
  object memosPanel: TPanel
    Left = 768
    Height = 75
    Top = 24
    Width = 255
    ClientHeight = 75
    ClientWidth = 255
    TabOrder = 1
    Visible = False
    object mSH: TMemo
      Left = 10
      Height = 135
      Top = 10
      Width = 225
      Lines.Strings = (
        '//'
        '// Spherical Harmonics'
        '// sh.cl'
        '//'
        ''
        '// preset table'
        '#define SH_N_CODES 647'
        'constant int SPHERICAL_HARMONICS_CODES[SH_N_CODES] = {'
        '    1222412,  1410121,  1420121,  1434301,  1441324,  1444401,  1444421,'
        '    2222222,  2240322,  2420214,  2441224,  4026442,  4032241,  4240412,'
        '    4310132,  4322142,  4323242,  4410112,  4422122,  4422133,  4422242,'
        '    11111212, 11112242, 11121314, 11121442, 11121443, 11132444, 11134321,'
        '    11142241, 11143234, 11214244, 11223344, 11224224, 11232334, 11242234,'
        '    11244141, 11244224, 11244444, 11311232, 11314442, 11321224, 11321242,'
        '    11331442, 11334422, 11344234, 11413142, 11421122, 11421133, 11421244,'
        '    11422233, 11434241, 11441111, 11442211, 12121224, 12123222, 12123244,'
        '    12124232, 12141212, 12221422, 12222212, 12222242, 12223242, 12244424,'
        '    12320124, 12321244, 12322141, 12341234, 12414244, 12420224, 12420244,'
        '    12421442, 12422232, 12431424, 12442124, 13121242, 13134224, 13142244,'
        '    13224424, 13243234, 13312222, 13313342, 13324143, 13332424, 13342114,'
        '    13422421, 13422421, 13434243, 13443212, 13443244, 13444124, 14032211,'
        '    14122442, 14126211, 14131214, 14142242, 14222231, 14222414, 14234211,'
        '    14234214, 14241424, 14242414, 14243444, 14322212, 14333242, 14344432,'
        '    14414232, 14422143, 14431243, 14432424, 14434241, 14444122, 14444232,'
        '    21022212, 21023122, 21030324, 21142223, 21142424, 21210412, 21212121,'
        '    21213434, 21214422, 21222222, 21222422, 21224212, 21234314, 21332321,'
        '    21333444, 21344422, 21412441, 21413214, 21413434, 21422122, 21422241,'
        '    21442221, 22023304, 22024402, 22041224, 22113231, 22124144, 22133212,'
        '    22141344, 22144344, 22212414, 22222244, 22223232, 22224231, 22224242,'
        '    22232442, 22243224, 22243442, 22314442, 22323222, 22323322, 22334334,'
        '    22344234, 22344404, 22411232, 22411432, 22420214, 22424222, 22424224,'
        '    22431442, 22432424, 22442212, 22442344, 22443232, 23112442, 23124422,'
        '    23124443, 23134234, 23142213, 23142314, 23143212, 23214221, 23224442,'
        '    23230324, 23232322, 23242441, 23244133, 23312441, 23324424, 23332244,'
        '    23344241, 23412342, 23414421, 23424144, 23432332, 23434423, 23442443,'
        '    23444233, 23444312, 24024442, 24112332, 24124442, 24133441, 24134314,'
        '    24144342, 24213423, 24222224, 24222422, 24222442, 24224422, 24234422,'
        '    24241212, 24242142, 24242412, 24243434, 24244224, 24313124, 24324433,'
        '    24330324, 24330324, 24333333, 24341423, 24412424, 24422214, 24422222,'
        '    24423423, 24431212, 24442231, 24444222, 31112444, 31124442, 31132324,'
        '    31142224, 31214244, 31221122, 31234431, 31244224, 31313422, 31323222,'
        '    31331234, 31342434, 31344234, 31414234, 31422241, 31432221, 31434111,'
        '    31434321, 31443224, 32111242, 32120214, 32123441, 32132224, 32144244,'
        '    32220144, 32221214, 32224222, 32224244, 32231242, 32243234, 32314222,'
        '    32321442, 32343222, 32412124, 32424232, 32424242, 32432124, 32432222,'
        '    32441232, 33141232, 33221322, 33244232, 33333333, 33412244, 33421234,'
        '    33422432, 33423121, 33441233, 34111244, 34124244, 34134243, 34143141,'
        '    34143144, 34210144, 34223221, 34223244, 34224224, 34234324, 34241214,'
        '    34243131, 34243212, 34314242, 34322112, 34334242, 34342414, 34343434,'
        '    34414442, 34422142, 34423242, 34424334, 34431243, 34432241, 34441441,'
        '    34442122, 34443234, 34444122, 41112442, 41122442, 41124122, 41132432,'
        '    41142244, 41144141, 41144442, 41212121, 41213244, 41213422, 41224124,'
        '    41224224, 41224334, 41231242, 41242214, 41244432, 41311222, 41313222,'
        '    41313442, 41324211, 41334223, 41341222, 41341222, 41342214, 41344441,'
        '    41412121, 41421442, 41422334, 41434144, 41442434, 42000024, 42024232,'
        '    42111412, 42123241, 42131212, 42142244, 42212412, 42221124, 42221222,'
        '    42222232, 42223432, 42232414, 42233223, 42241212, 42313422, 42323244,'
        '    42323422, 42324244, 42333422, 42333442, 42342341, 42344241, 42412444,'
        '    42413121, 42421424, 42422424, 42423232, 42424141, 42424444, 42433124,'
        '    42441111, 42441222, 42441232, 42622462, 42624422, 43114443, 43122224,'
        '    43124114, 43131324, 43134144, 43142212, 43144344, 43214321, 43221432,'
        '    43232442, 43244322, 43313443, 43323212, 43323212, 43324224, 43334413,'
        '    43342222, 43342432, 43344334, 43414422, 43421121, 43424242, 43434142,'
        '    43434144, 43434442, 43444422, 44004400, 44112412, 44113231, 44121224,'
        '    44134122, 44134324, 44143322, 44213242, 44221144, 44234124, 44234232,'
        '    44243422, 44314123, 44322124, 44334242, 44334343, 44342232, 44342412,'
        '    44414224, 44421242, 44421421, 44421424, 44431421, 44432424, 44441212,'
        '    44444242, 12345678, 13287282, 26345664, 26722884, 27282827, 27382738,'
        '    27384856, 34567812, 36178242, 36377284, 36383836, 36546644, 37483847,'
        '    41828446, 42273881, 42428822, 42646246, 45226644, 45434666, 45544256,'
        '    45565254, 45634566, 46266464, 46352226, 46466433, 46514416, 46544346,'
        '    46544654, 46545253, 46611454, 46636546, 46727861, 46848126, 47484748,'
        '    47626684, 48422614, 48424841, 51144446, 51263462, 51325455, 51446454,'
        '    51546634, 51563652, 51616151, 51644243, 51644633, 52145236, 52222553,'
        '    52344664, 52465354, 52466446, 52545256, 52564464, 52566465, 52664654,'
        '    52824574, 52828252, 53164266, 53261146, 53364463, 53426426, 53464345,'
        '    53536564, 53623456, 53634434, 53665364, 53816273, 54354662, 54365636,'
        '    54424262, 54445464, 54466344, 54546444, 54613546, 54633426, 54644554,'
        '    54647484, 55266536, 55446446, 55546256, 55555555, 55556666, 56266411,'
        '    56344624, 56366644, 56434663, 56645264, 56646264, 57356365, 57386575,'
        '    61144246, 61243256, 61345524, 61366442, 61446256, 61452663, 61465462,'
        '    61465642, 61487462, 61515162, 61546264, 61555464, 61626364, 61644644,'
        '    61645245, 62246654, 62446264, 62544564, 62545366, 62546455, 62624554,'
        '    62648628, 62666461, 62726574, 63266454, 63286212, 63364224, 63366254,'
        '    63446264, 62545564, 63626263, 63636266, 64162446, 64252546, 64354462,'
        '    64365636, 64415264, 64436544, 64446264, 64446534, 64534244, 64636261,'
        '    64644554, 64668571, 64828241, 65345261, 65432884, 65436543, 65446264,'
        '    65526244, 65533264, 65536266, 65464838, 65784231, 65837244, 66162444,'
        '    66226644, 66245544, 66344661, 66365254, 66444264, 66446264, 66446644,'
        '    66526652, 66566424, 66576658, 66635246, 66644624, 66665656, 66666868,'
        '    66872244, 67184718, 67442786, 67822674, 68166264, 68284821, 68426842,'
        '    68626448, 68628448, 71288472, 71528364, 72484846, 72527252, 72727474,'
        '    72737475, 72747678, 72774848, 72816384, 73747526, 73836283, 74737271,'
        '    74846484, 75227641, 75318642, 75717472, 75737274, 76677484, 76737321,'
        '    77447722, 77665544, 77784846, 78167264, 78332364, 78767684, 78787274,'
        '    81417181, 81828281, 81828384, 82222534, 82246116, 82264224, 82624242,'
        '    82645731, 82727282, 82747816, 82828484, 82848688, 83325375, 83737383,'
        '    83828482, 83848483, 84622884, 84627181, 84627531, 84644221, 84682866,'
        '    84822221, 84838281, 84841111, 85243642, 85737583, 85847372, 85848182,'
        '    85858686, 85868283, 86442221, 86838321, 87766554, 88228822, 88646261,'
        '    88824442, 88888888, 44444444};'
        ''
        '// generate color map'
        ''
        'float3 calc_color(float v, float vmin, float vmax, int type) {'
        '  float dv, vmid;'
        '  float3 c = (float3)(1, 1, 1);'
        '  float3 c1, c2, c3;'
        '  float ratio;'
        '  if (vmax < vmin) {'
        '    dv = vmin;'
        '    vmin = vmax;'
        '    vmax = dv;'
        '  }'
        '  if (vmax - vmin < 1.0e-6f) {'
        '    vmin -= 1;'
        '    vmax += 1;'
        '  }'
        '  if (v < vmin)'
        '    v = vmin;'
        '  if (v > vmax)'
        '    v = vmax;'
        '  dv = vmax - vmin;'
        '  switch (type) {'
        '  case 0:'
        '  case 1:'
        '    if (v < (vmin + 0.25f * dv)) {'
        '      c.x = 0;'
        '      c.y = 4 * (v - vmin) / dv;'
        '      c.z = 1;'
        '    } else if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 0;'
        '      c.y = 1;'
        '      c.z = 1 + 4 * (vmin + 0.25f * dv - v) / dv;'
        '    } else if (v < (vmin + 0.75f * dv)) {'
        '      c.x = 4 * (v - vmin - 0.5f * dv) / dv;'
        '      c.y = 1;'
        '      c.z = 0;'
        '    } else {'
        '      c.x = 1;'
        '      c.y = 1 + 4 * (vmin + 0.75f * dv - v) / dv;'
        '      c.z = 0;'
        '    }'
        '    break;'
        ''
        '  case 2:'
        '    c.x = (v - vmin) / dv;'
        '    c.y = 0;'
        '    c.z = (vmax - v) / dv;'
        '    break;'
        '  case 3:'
        '    c.x = (v - vmin) / dv;'
        '    c.z = c.x;'
        '    c.y = c.x;'
        '    break;'
        '  case 4:'
        '    if (v < (vmin + dv / 6)) {'
        '      c.x = 1;'
        '      c.y = 6 * (v - vmin) / dv;'
        '      c.z = 0;'
        '    } else if (v < (vmin + 2 * dv / 6)) {'
        '      c.x = 1 + 6 * (vmin + dv / 6 - v) / dv;'
        '      c.y = 1;'
        '      c.z = 0;'
        '    } else if (v < (vmin + 3 * dv / 6)) {'
        '      c.x = 0;'
        '      c.y = 1;'
        '      c.z = 6 * (v - vmin - 2 * dv / 6) / dv;'
        '    } else if (v < (vmin + 4 * dv / 6)) {'
        '      c.x = 0;'
        '      c.y = 1 + 6 * (vmin + 3 * dv / 6 - v) / dv;'
        '      c.z = 1;'
        '    } else if (v < (vmin + 5 * dv / 6)) {'
        '      c.x = 6 * (v - vmin - 4 * dv / 6) / dv;'
        '      c.y = 0;'
        '      c.z = 1;'
        '    } else {'
        '      c.x = 1;'
        '      c.y = 0;'
        '      c.z = 1 + 6 * (vmin + 5 * dv / 6 - v) / dv;'
        '    }'
        '    break;'
        ''
        '  case 5:'
        '    c.x = (v - vmin) / (vmax - vmin);'
        '    c.y = 1;'
        '    c.z = 0;'
        '    break;'
        '  case 6:'
        '    c.x = (v - vmin) / (vmax - vmin);'
        '    c.y = (vmax - v) / (vmax - vmin);'
        '    c.z = c.x;'
        '    break;'
        '  case 7:'
        '    if (v < (vmin + 0.25f * dv)) {'
        '      c.x = 0;'
        '      c.y = 4 * (v - vmin) / dv;'
        '      c.z = 1 - c.y;'
        '    } else if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 4 * (v - vmin - 0.25f * dv) / dv;'
        '      c.y = 1 - c.x;'
        '      c.z = 0;'
        '    } else if (v < (vmin + 0.75f * dv)) {'
        '      c.y = 4 * (v - vmin - 0.5f * dv) / dv;'
        '      c.x = 1 - c.y;'
        '      c.z = 0;'
        '    } else {'
        '      c.x = 0;'
        '      c.z = 4 * (v - vmin - 0.75f * dv) / dv;'
        '      c.y = 1 - c.z;'
        '    }'
        '    break;'
        '  case 8:'
        '    if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 2 * (v - vmin) / dv;'
        '      c.y = c.x;'
        '      c.z = c.x;'
        '    } else {'
        '      c.x = 1 - 2 * (v - vmin - 0.5f * dv) / dv;'
        '      c.y = c.x;'
        '      c.z = c.x;'
        '    }'
        '    break;'
        '  case 9:'
        '    if (v < (vmin + dv / 3)) {'
        '      c.z = 3 * (v - vmin) / dv;'
        '      c.y = 0;'
        '      c.x = 1 - c.z;'
        '    } else if (v < (vmin + 2 * dv / 3)) {'
        '      c.x = 0;'
        '      c.y = 3 * (v - vmin - dv / 3) / dv;'
        '      c.z = 1;'
        '    } else {'
        '      c.x = 3 * (v - vmin - 2 * dv / 3) / dv;'
        '      c.y = 1 - c.x;'
        '      c.z = 1;'
        '    }'
        '    break;'
        ''
        '  case 10:'
        '    if (v < (vmin + 0.2f * dv)) {'
        '      c.x = 0;'
        '      c.y = 5 * (v - vmin) / dv;'
        '      c.z = 1;'
        '    } else if (v < (vmin + 0.4f * dv)) {'
        '      c.x = 0;'
        '      c.y = 1;'
        '      c.z = 1 + 5 * (vmin + 0.2f * dv - v) / dv;'
        '    } else if (v < (vmin + 0.6f * dv)) {'
        '      c.x = 5 * (v - vmin - 0.4f * dv) / dv;'
        '      c.y = 1;'
        '      c.z = 0;'
        '    } else if (v < (vmin + 0.8f * dv)) {'
        '      c.x = 1;'
        '      c.y = 1 - 5 * (v - vmin - 0.6f * dv) / dv;'
        '      c.z = 0;'
        '    } else {'
        '      c.x = 1;'
        '      c.y = 5 * (v - vmin - 0.8f * dv) / dv;'
        '      c.z = 5 * (v - vmin - 0.8f * dv) / dv;'
        '    }'
        '    break;'
        '  case 11:'
        '    c1.x = 200 / 255;'
        '    c1.y = 60 / 255;'
        '    c1.z = 0 / 255;'
        '    c2.x = 250 / 255;'
        '    c2.y = 160 / 255;'
        '    c2.z = 110 / 255;'
        '    c.x = (c2.x - c1.x) * (v - vmin) / dv + c1.x;'
        '    c.y = (c2.y - c1.y) * (v - vmin) / dv + c1.y;'
        '    c.z = (c2.z - c1.z) * (v - vmin) / dv + c1.z;'
        '    break;'
        '  case 12:'
        '    c1.x = 55 / 255;'
        '    c1.y = 55 / 255;'
        '    c1.z = 45 / 255;'
        '    c2.x = 235 / 255;'
        '    c2.y = 90 / 255;'
        '    c2.z = 30 / 255;'
        '    c3.x = 250 / 255;'
        '    c3.y = 160 / 255;'
        '    c3.z = 110 / 255;'
        '    ratio = 0.4f;'
        '    vmid = vmin + ratio * dv;'
        '    if (v < vmid) {'
        '      c.x = (c2.x - c1.x) * (v - vmin) / (ratio * dv) + c1.x;'
        '      c.y = (c2.y - c1.y) * (v - vmin) / (ratio * dv) + c1.y;'
        '      c.z = (c2.z - c1.z) * (v - vmin) / (ratio * dv) + c1.z;'
        '    } else {'
        '      c.x = (c3.x - c2.x) * (v - vmid) / ((1 - ratio) * dv) + c2.x;'
        '      c.y = (c3.y - c2.y) * (v - vmid) / ((1 - ratio) * dv) + c2.y;'
        '      c.z = (c3.z - c2.z) * (v - vmid) / ((1 - ratio) * dv) + c2.z;'
        '    }'
        '    break;'
        '  case 13:'
        '    c1.x = 0 / 255;'
        '    c1.y = 255 / 255;'
        '    c1.z = 0 / 255;'
        '    c2.x = 255 / 255;'
        '    c2.y = 150 / 255;'
        '    c2.z = 0 / 255;'
        '    c3.x = 255 / 255;'
        '    c3.y = 250 / 255;'
        '    c3.z = 240 / 255;'
        '    ratio = 0.3f;'
        '    vmid = vmin + ratio * dv;'
        '    if (v < vmid) {'
        '      c.x = (c2.x - c1.x) * (v - vmin) / (ratio * dv) + c1.x;'
        '      c.y = (c2.y - c1.y) * (v - vmin) / (ratio * dv) + c1.y;'
        '      c.z = (c2.z - c1.z) * (v - vmin) / (ratio * dv) + c1.z;'
        '    } else {'
        '      c.x = (c3.x - c2.x) * (v - vmid) / ((1 - ratio) * dv) + c2.x;'
        '      c.y = (c3.y - c2.y) * (v - vmid) / ((1 - ratio) * dv) + c2.y;'
        '      c.z = (c3.z - c2.z) * (v - vmid) / ((1 - ratio) * dv) + c2.z;'
        '    }'
        '    break;'
        '  case 14:'
        '    c.x = 1;'
        '    c.y = 1 - (v - vmin) / dv;'
        '    c.z = 0;'
        '    break;'
        '  case 15:'
        '    if (v < (vmin + 0.25f * dv)) {'
        '      c.x = 0;'
        '      c.y = 4 * (v - vmin) / dv;'
        '      c.z = 1;'
        '    } else if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 0;'
        '      c.y = 1;'
        '      c.z = 1 - 4 * (v - vmin - 0.25f * dv) / dv;'
        '    } else if (v < (vmin + 0.75f * dv)) {'
        '      c.x = 4 * (v - vmin - 0.5f * dv) / dv;'
        '      c.y = 1;'
        '      c.z = 0;'
        '    } else {'
        '      c.x = 1;'
        '      c.y = 1;'
        '      c.z = 4 * (v - vmin - 0.75f * dv) / dv;'
        '    }'
        '    break;'
        '  case 16:'
        '    if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 0;'
        '      c.y = 2 * (v - vmin) / dv;'
        '      c.z = 1 - 2 * (v - vmin) / dv;'
        '    } else {'
        '      c.x = 2 * (v - vmin - 0.5f * dv) / dv;'
        '      c.y = 1 - 2 * (v - vmin - 0.5f * dv) / dv;'
        '      c.z = 0;'
        '    }'
        '    break;'
        '  case 17:'
        '    if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 1;'
        '      c.y = 1 - 2 * (v - vmin) / dv;'
        '      c.z = 2 * (v - vmin) / dv;'
        '    } else {'
        '      c.x = 1 - 2 * (v - vmin - 0.5f * dv) / dv;'
        '      c.y = 2 * (v - vmin - 0.5f * dv) / dv;'
        '      c.z = 1;'
        '    }'
        '    break;'
        '  case 18:'
        '    c.x = 0;'
        '    c.y = (v - vmin) / (vmax - vmin);'
        '    c.z = 1;'
        '    break;'
        '  case 19:'
        '    c.x = (v - vmin) / (vmax - vmin);'
        '    c.y = c.x;'
        '    c.z = 1;'
        '    break;'
        '  case 20:'
        '    c1.x = 0 / 255;'
        '    c1.y = 160 / 255;'
        '    c1.z = 0 / 255;'
        '    c2.x = 180 / 255;'
        '    c2.y = 220 / 255;'
        '    c2.z = 0 / 255;'
        '    c3.x = 250 / 255;'
        '    c3.y = 220 / 255;'
        '    c3.z = 170 / 255;'
        '    ratio = 0.3f;'
        '    vmid = vmin + ratio * dv;'
        '    if (v < vmid) {'
        '      c.x = (c2.x - c1.x) * (v - vmin) / (ratio * dv) + c1.x;'
        '      c.y = (c2.y - c1.y) * (v - vmin) / (ratio * dv) + c1.y;'
        '      c.z = (c2.z - c1.z) * (v - vmin) / (ratio * dv) + c1.z;'
        '    } else {'
        '      c.x = (c3.x - c2.x) * (v - vmid) / ((1 - ratio) * dv) + c2.x;'
        '      c.y = (c3.y - c2.y) * (v - vmid) / ((1 - ratio) * dv) + c2.y;'
        '      c.z = (c3.z - c2.z) * (v - vmid) / ((1 - ratio) * dv) + c2.z;'
        '    }'
        '    break;'
        '  case 21:'
        '    c1.x = 255 / 255;'
        '    c1.y = 255 / 255;'
        '    c1.z = 200 / 255;'
        '    c2.x = 150 / 255;'
        '    c2.y = 150 / 255;'
        '    c2.z = 255 / 255;'
        '    c.x = (c2.x - c1.x) * (v - vmin) / dv + c1.x;'
        '    c.y = (c2.y - c1.y) * (v - vmin) / dv + c1.y;'
        '    c.z = (c2.z - c1.z) * (v - vmin) / dv + c1.z;'
        '    break;'
        '  case 22:'
        '    c.x = 1 - (v - vmin) / dv;'
        '    c.y = 1 - (v - vmin) / dv;'
        '    c.z = (v - vmin) / dv;'
        '    break;'
        '  case 23:'
        '    if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 1;'
        '      c.y = 2 * (v - vmin) / dv;'
        '      c.z = c.y;'
        '    } else {'
        '      c.x = 1 - 2 * (v - vmin - 0.5f * dv) / dv;'
        '      c.y = c.x;'
        '      c.z = 1;'
        '    }'
        '    break;'
        '  case 24:'
        '    if (v < (vmin + 0.5f * dv)) {'
        '      c.x = 2 * (v - vmin) / dv;'
        '      c.y = c.x;'
        '      c.z = 1 - c.x;'
        '    } else {'
        '      c.x = 1;'
        '      c.y = 1 - 2 * (v - vmin - 0.5f * dv) / dv;'
        '      c.z = 0;'
        '    }'
        '    break;'
        '  case 25:'
        '    if (v < (vmin + dv / 3)) {'
        '      c.x = 0;'
        '      c.y = 3 * (v - vmin) / dv;'
        '      c.z = 1;'
        '    } else if (v < (vmin + 2 * dv / 3)) {'
        '      c.x = 3 * (v - vmin - dv / 3) / dv;'
        '      c.y = 1 - c.x;'
        '      c.z = 1;'
        '    } else {'
        '      c.x = 1;'
        '      c.y = 0;'
        '      c.z = 1 - 3 * (v - vmin - 2 * dv / 3) / dv;'
        '    }'
        '    break;'
        '  }'
        '  return c;'
        '}'
        ''
        'inline float abs_pow(float x, float y) { return pow(fabs(x), y); }'
        ''
        'float3 calc_position(float *code, float theta, float phi) {'
        '  float r = abs_pow(sin(code[0] * phi), code[1]) +'
        '            abs_pow(cos(code[2] * phi), code[3]) +'
        '            abs_pow(sin(code[4] * theta), code[5]) +'
        '            abs_pow(cos(code[6] * theta), code[7]);'
        ''
        '  // if (isnan(r)) r=0;'
        '  return (float3)(r * sin(phi) * cos(theta), r * cos(phi),'
        '                  r * sin(phi) * sin(theta));'
        '}'
        ''
        'float3 calc_normal(float3 v0, float3 v1, float3 v2) {'
        '  float3 cr = cross(v2 - v0, v1 - v0);'
        '  return cr == (float3)(0, 0, 0) ? (float3)(0, 0, 0) : normalize(cr);'
        '}'
        ''
        'void generate_code(float code[8], int n_code) {'
        ''
        '  int m = SPHERICAL_HARMONICS_CODES[n_code % SH_N_CODES];'
        ''
        '  for (int k = 0; k < 8; k++) {'
        '    code[7 - k] = (m % 10);'
        '    m /= 10;'
        '  }'
        '}'
        ''
        '// Mesh float3 is float4 w/0 pad'
        'struct Vertex {'
        '  float3 position, normal, color, texture;'
        '};'
        ''
        '// kernel'
        'kernel void spherical_harmonics('
        '  global struct Vertex *mesh, // 0 : mesh -> out'
        '  int resolution,             // 1 : resolution   -> in'
        '  int color_map,              // 2 : color_map    -> in'
        '  int n_code                  // 3 : n_code       -> in'
        ''
        ') {'
        '  size_t index = get_global_id(0);'
        ''
        '  int i = (int)(index / resolution),'
        '      j = (int)(index % resolution); // point(i,j)'
        ''
        '#define PI 3.141592654f'
        ''
        '  float code[8]; // gen preset code'
        '  generate_code(code, n_code);'
        ''
        '  float du = (PI * 2) / resolution, // Theta'
        '        dv = PI / resolution,         // Phi'
        '        dx = 1 / resolution, u = du * i, v = dv * j,'
        '        color_offset = (i & 1) == 0 ? u : u + du;'
        ''
        '  float3 position = calc_position(code, u, v),'
        '         normal = calc_normal(position, calc_position(code, u + du, v),'
        '                              calc_position(code, u, v + dv));'
        ''
        '  // set output vertex to mesh[index] ( Vertex, Normal, Color, Texture )'
        '  mesh[index] ='
        '      (struct Vertex){.position = position,'
        '                      .normal = normal,'
        '                      .color = calc_color(color_offset, 0, PI * 2, color_map),'
        '                      .texture = (float3)(i * dx, j * dx, 0)};'
        '}'
      )
      TabOrder = 0
      Visible = False
    end
    object mMandelbrot: TMemo
      Left = 10
      Height = 135
      Top = 10
      Width = 225
      Lines.Strings = (
        '//'
        '//  mandelbrot.cl'
        '//'
        ''
        '// image pallete'
        'constant uint fire_pallete[256] = {'
        '    0,        0,        4,        12,       16,       24,       32,'
        '    36,       44,       48,       56,       64,       68,       76,'
        '    80,       88,       96,       100,      108,      116,      120,'
        '    128,      132,      140,      148,      152,      160,      164,'
        '    172,      180,      184,      192,      200,      1224,     3272,'
        '    4300,     6348,     7376,     9424,     10448,    12500,    14548,'
        '    15576,    17624,    18648,    20700,    21724,    23776,    25824,'
        '    26848,    28900,    29924,    31976,    33000,    35048,    36076,'
        '    38124,    40176,    41200,    43248,    44276,    46324,    47352,'
        '    49400,    51452,    313596,   837884,   1363196,  1887484,  2412796,'
        '    2937084,  3461372,  3986684,  4510972,  5036284,  5560572,  6084860,'
        '    6610172,  7134460,  7659772,  8184060,  8708348,  9233660,  9757948,'
        '    10283260, 10807548, 11331836, 11857148, 12381436, 12906748, 13431036,'
        '    13955324, 14480636, 15004924, 15530236, 16054524, 16579836, 16317692,'
        '    16055548, 15793404, 15269116, 15006972, 14744828, 14220540, 13958396,'
        '    13696252, 13171964, 12909820, 12647676, 12123388, 11861244, 11599100,'
        '    11074812, 10812668, 10550524, 10288380, 9764092,  9501948,  9239804,'
        '    8715516,  8453372,  8191228,  7666940,  7404796,  7142652,  6618364,'
        '    6356220,  6094076,  5569788,  5307644,  5045500,  4783356,  4259068,'
        '    3996924,  3734780,  3210492,  2948348,  2686204,  2161916,  1899772,'
        '    1637628,  1113340,  851196,   589052,   64764,    63740,    62716,'
        '    61692,    59644,    58620,    57596,    55548,    54524,    53500,'
        '    51452,    50428,    49404,    47356,    46332,    45308,    43260,'
        '    42236,    41212,    40188,    38140,    37116,    36092,    34044,'
        '    33020,    31996,    29948,    28924,    27900,    25852,    24828,'
        '    23804,    21756,    20732,    19708,    18684,    16636,    15612,'
        '    14588,    12540,    11516,    10492,    8444,     7420,     6396,'
        '    4348,     3324,     2300,     252,      248,      244,      240,'
        '    236,      232,      228,      224,      220,      216,      212,'
        '    208,      204,      200,      196,      192,      188,      184,'
        '    180,      176,      172,      168,      164,      160,      156,'
        '    152,      148,      144,      140,      136,      132,      128,'
        '    124,      120,      116,      112,      108,      104,      100,'
        '    96,       92,       88,       84,       80,       76,       72,'
        '    68,       64,       60,       56,       52,       48,       44,'
        '    40,       36,       32,       28,       24,       20,       16,'
        '    12,       8,        0,        0};'
        ''
        '//'
        '// mandelbrot kernel'
        '//'
        'kernel void mandelbrot(global uint *image,   // 0: output image'
        '                       float2 center, // 1: center [2,1]'
        '                       float scale,  // 2: scale [2]'
        '                       int iter,     // 3: iterations'
        '                       int width)    // 4: width'
        '{'
        ''
        '  size_t index = get_global_id(0);'
        ''
        '  // int width = (int)sqrt((float)get_global_size(0)); // w x w = n'
        ''
        '  float2 coord = (float2)(index % width, index / width) / width;'
        ''
        '  float2 c = (float2)(1.3333f * coord.x * scale - center.x,'
        '                      coord.y * scale - center.y),'
        '         z = c;'
        ''
        '  for (int it = 0; it < iter; it++) {'
        '    z = (float2)(z.x * z.x - z.y * z.y, z.y * z.x + z.x * z.y) + c;'
        '    if (dot(z, z) > 4.0f) {'
        '      image[index] = 0xff000000u | fire_pallete[((256 * it) / 50) % 256]; // iter element of pallete'
        '      return;'
        '    }'
        '  }'
        '  image[index] = 0xff000000u; // out of iter range -> black'
        '}'
      )
      TabOrder = 1
      Visible = False
    end
    object mVoronoi: TMemo
      Left = 10
      Height = 135
      Top = 10
      Width = 225
      Lines.Strings = (
        '//'
        '// voronoi.cl'
        '//'
        ''
        '#pragma OPENCL EXTENSION cl_khr_fp16 : enable'
        ''
        ''
        '// input point struct'
        'struct Point {'
        '  float2 pos;'
        '  uint color;'
        '  uint pad; // 32 bit alignment field'
        '};'
        ''
        'inline float dist_squared(float2 a, float2 b) {'
        '  float2 c = a - b;'
        '  return dot(c, c);'
        '}'
        ''
        '#define dist2(i) dist_squared(points[i].pos, current_point)'
        ''
        '// voronio kernel'
        'kernel void voronoi(global uint *image,          // 0: output image'
        '                    global struct Point *points, // 1: point set'
        '                    int n_points,                // 2: n_points'
        '                    int width                    // 3: width'
        ') {'
        ''
        '  uint black = 0xff000000u;'
        ''
        '  size_t index = get_global_id(0);'
        '  // int width = (int)sqrt((float)get_global_size(0)); // w x w = n'
        ''
        '  float2 current_point = (float2)(index % width, index / width) / width;'
        ''
        '  uint color = black;'
        '  float dist = dist2(0), circ_diam = 1e-3f/width;'
        ''
        '  for (int i = 1; i < n_points; i++) {'
        '    float d = dist2(i);'
        ''
        '    if (d < circ_diam) { // draw center circle??'
        '      color = black;'
        '      break;'
        '    }'
        '    if (d < dist) {'
        '      dist = d;'
        '      color = points[i].color;'
        '    }'
        '  }'
        ''
        '  image[index] = black | color;'
        '}'
      )
      TabOrder = 2
      Visible = False
    end
    object mDC: TMemo
      Left = 10
      Height = 135
      Top = 10
      Width = 225
      Lines.Strings = (
        '// Domain Coloring'
        '// dc.cl'
        ''
        '#define vec2 float2'
        '#define vec3 float3'
        '#define vec4 float4'
        ''
        '// complex arithmetics: +,-, neg direct vec2 support'
        'vec2 mul(vec2 a, vec2 b) {'
        '  return (vec2)(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);'
        '}'
        'vec2 div(vec2 a, vec2 b) {'
        '  float _div = (b.x * b.x) + (b.y * b.y);'
        '  return (vec2)(((a.x * b.x) + (a.y * b.y)) / _div,'
        '                ((a.y * b.x) - (a.x * b.y)) / _div);'
        '}'
        ''
        'float cabs(vec2 a) { return dot(a, a); }'
        'float sqmag(vec2 a) { return dot(a, a); }'
        'float arg(vec2 a) { return atan2(a.y, a.x); }'
        ''
        'vec2 cnpow(vec2 a, float n) {'
        '  float rn = pow(length(a), n), na = n * arg(a);'
        '  return (vec2)(rn * cos(na), rn * sin(na));'
        '}'
        ''
        'vec2 cpow(vec2 a, vec2 z) {'
        '  float c = z.x, d = z.y;'
        '  float m = pow(sqmag(a), c / 2) * exp(-d * arg(a));'
        '  float _re = m * cos(c * arg(a) + 1 / 2 * d * log(sqmag(a))),'
        '        _im = m * sin(c * arg(a) + 1 / 2 * d * log(sqmag(a)));'
        '  return (vec2)(_re, _im);'
        '}'
        ''
        'vec2 csqrt(vec2 z) {'
        '  float a = length(z);'
        '  return (vec2)(sqrt((a + z.x) / 2), sign(z.y) * sqrt((a - z.x) / 2));'
        '}'
        ''
        'vec2 clog(vec2 z) { return (vec2)(log(length(z)), arg(z)); }'
        ''
        'vec2 ccosh(vec2 z) {'
        '  return (vec2)(cosh(z.x) * cos(z.y), sinh(z.x) * sin(z.y));'
        '}'
        'vec2 csinh(vec2 z) {'
        '  return (vec2)(sinh(z.x) * cos(z.y), cosh(z.x) * sin(z.y));'
        '}'
        'vec2 csin(vec2 z) { return (vec2)(sin(z.x) * cosh(z.y), cos(z.x) * sinh(z.y)); }'
        'vec2 ccos(vec2 z) {'
        '  return (vec2)(cos(z.x) * cosh(z.y), -sin(z.x) * sinh(z.y));'
        '}'
        'vec2 ctan(vec2 z) { return div(sin(z), cos(z)); }'
        ''
        'vec2 casinh(vec2 z) {'
        '  vec2 t = (vec2)((z.x - z.y) * (z.x + z.y) + 1, 2 * z.x * z.y);'
        '  return log(sqrt(t) + z);'
        '}'
        ''
        'vec2 casin(vec2 z) {'
        '  vec2 t = asinh((vec2)(-z.y, z.x));'
        '  return (vec2)(t.y, -t.x);'
        '}'
        'vec2 cacos(vec2 z) {'
        '  vec2 t = asin(z);'
        '  return (vec2)(1.7514f - t.x, -t.y);'
        '}'
        ''
        '////////////////////////'
        ''
        'uint argbf2uint(uint alpha, float r, float g, float b) {'
        '  return (alpha << 24) | ((uint)(255.f * r) & 0xffu) |'
        '         (((uint)(255.f * g) & 0xffu) << 8) |'
        '         (((uint)(255.f * b) & 0xffu) << 16);'
        '}'
        ''
        'uint rgbf2uint(float r, float g, float b) {'
        '  return 0xff000000u | // alpha 0xff'
        '         ((uint)(r * 255) & 0xffu) | (((uint)(g * 255) & 0xffu) << 8) |'
        '         (((uint)(b * 255) & 0xffu) << 16);'
        '}'
        ''
        'uint HSV2RGB(float h, float s, float v) { // convert hsv to rgb,1'
        '  vec3 res;'
        ''
        '  if (s == 0) {'
        '    res = (vec3)(v, v, v);'
        '  } else {'
        '    if (h == 1)'
        '      h = 0;'
        ''
        '    float z = floor(h * 6), f = h * 6 - z, p = v * (1 - s), q = v * (1 - s * f),'
        '          t = v * (1 - s * (1 - f));'
        ''
        '    switch ((int)(z) % 6) {'
        '    case 0:'
        '      res = (vec3)(v, t, p);'
        '      break;'
        '    case 1:'
        '      res = (vec3)(q, v, p);'
        '      break;'
        '    case 2:'
        '      res = (vec3)(p, v, t);'
        '      break;'
        '    case 3:'
        '      res = (vec3)(p, q, v);'
        '      break;'
        '    case 4:'
        '      res = (vec3)(t, p, v);'
        '      break;'
        '    case 5:'
        '      res = (vec3)(v, p, q);'
        '      break;'
        '    }'
        '  }'
        '  return rgbf2uint(res.x, res.y, res.z);'
        '}'
        ''
        'vec2 domain_color_func(vec2); // domain coloring func'
        ''
        'uint dc_get_color(int x, int y, int w, int h) {'
        ''
        '  float E = 2.7182818284f, PI = 3.141592653f, PI2 = PI * 2;'
        '  float limit = PI, rmi = -limit, rma = limit, imi = -limit, ima = limit;'
        ''
        '  vec2 z ='
        '      (vec2)(ima - (ima - imi) * y / (h - 1), rma - (rma - rmi) * x / (w - 1));'
        ''
        '  vec2 v = domain_color_func(z); // evaluate domain coloring func'
        ''
        '  float m, ranges, rangee; //  prop. e^n < m < e^(n-1)'
        '  for (m = length(v), ranges = 0, rangee = 1; m > rangee; rangee *= E)'
        '    ranges = rangee;'
        ''
        '  float k = (m - ranges) / (rangee - ranges),'
        '        kk = (k < 0.5f ? k * 2 : 1 - (k - 0.5f) * 2);'
        ''
        '  float ang = fmod(fabs(arg(v)), PI2) / PI2, // -> hsv'
        '      sat = 0.4f + (1 - pow(1 - kk, 3)) * 0.6f,'
        '        val = 0.6f + (1 - pow(1 - (1 - kk), 3)) * 0.4f;'
        ''
        '  return HSV2RGB(ang, sat, val);'
        '}'
        ''
        '/////////////////////// the domain coloring func'
        ''
        'vec2 domain_color_func(vec2 z) { // f(z)'
        '  // return mul(z, z);'
        '  vec2 z1 = div(cnpow(z, 4) + 1, cnpow(z, 3) - 1);'
        '  // vec2 z1 = mul(cnpow(z, 4), cos(z)) + cnpow(z, 4);'
        '  z1 += mul(z / 5, csin(z));'
        '  return z1;'
        '}'
        ''
        '// kernel'
        'kernel void domain_coloring(global uint *image, int width) {'
        '  size_t index = get_global_id(0);'
        '  // int width = (int)sqrt((float)get_global_size(0)); // w x w = n'
        ''
        '  int x = (int)(index / width),'
        '      y = (int)(index % width); // point(x,y)'
        ''
        '  image[index] = dc_get_color(x, y, width, width);'
        '}'
      )
      TabOrder = 3
      Visible = False
    end
  end
  object topPanel: TPanel
    Left = 0
    Height = 40
    Top = 0
    Width = 1065
    Align = alTop
    ClientHeight = 40
    ClientWidth = 1065
    TabOrder = 2
    object cbTypes: TComboBox
      Left = 1
      Height = 38
      Top = 1
      Width = 199
      Align = alLeft
      ItemHeight = 30
      ItemIndex = 0
      Items.Strings = (
        'voronoi'
        'mandelbrot'
        'spherical harmonics'
        'domain coloring'
      )
      TabOrder = 0
      Text = 'voronoi'
      OnChange = cbTypesChange
    end
  end
end
